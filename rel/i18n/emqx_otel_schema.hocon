emqx_otel_schema {

opentelemetry.desc: "Open Telemetry Toolkit configuration"
opentelemetry.label: "Open Telemetry"

otel_logs.desc:
"""Open Telemetry Logs configuration. If enabled, EMQX installs a log handler that formats events according to Open Telemetry log data model and
exports them to the configured Open Telemetry collector or backend."""
otel_logs.label: "Open Telemetry Logs"

otel_metrics.desc: "Open Telemetry Metrics configuration."
otel_metrics.label: "Open Telemetry Metrics"

otel_traces.desc: "Open Telemetry Traces configuration."
otel_traces.label: "Open Telemetry Traces"

enable.desc: "Enable or disable Open Telemetry signal."
enable.label: "Enable."

otel_exporter.desc: "Open Telemetry Exporter"
otel_exporter.label: "Exporter"

max_queue_size.desc:
"""The maximum queue size. After the size is reached Open Telemetry signals are dropped."""
max_queue_size.label: "Max Queue Size"

exporting_timeout.desc: "The time Open Telemetry signal export can run before it is cancelled."
exporting_timeout.label: "Exporting Timeout"

scheduled_delay.desc: "The delay interval between two consecutive exports of Open Telemetry signals."
scheduled_delay.label: "Scheduled Delay Interval"

exporter_endpoint.desc:
"""The target URL to which the exporter is going to send Open Telemetry signal data."""
exporter_endpoint.label: "Exporter Endpoint"

exporter_protocol.desc: "The transport protocol of Open Telemetry Exporter"
exporter_protocol.label: "Exporter Protocol"

exporter_ssl.desc: "SSL configuration for the Open Telemetry exporter"
exporter_ssl.label: "SSL Options"

otel_log_handler_level.desc:
"""The log level of the Open Telemetry log handler."""
otel_log_handler_level.label: "Log Level"

trace_filter.desc: "Open Telemetry Trace Filter configuration"
trace_filter.label: "Trace Filter"

trace_all.desc:
"""If enabled, all published messages are traced, a new trace ID is generated if it can't be extracted from the message.
Otherwise, only messages published with trace context are traced. <br/>
Disabled by default.<br/>
Note: this config only takes effect when <code>trace_mode</code> is set to <code>legacy</code>."""
trace_all.label: "Trace All"

trace_mode.desc:
"""Opentelemetry tracing mode.<br/>
- `legacy`: follow the old tracing method, only trace message publishing and delivery.<br/>
  Span Name will remain compatible with the old version.
- `e2e`: end-to-end tracing mode. All kinds of client behaviors will be traced:<br/>
  Connection/Disconnection/Subscription/Unsubscription/Message Publishing/Message delivery.<br/>
  More control options and sampling functions are controlled by the `e2e_tracing_options` sub-configuration item<br/>"""
trace_mode.label: "Trace Mode"

e2e_tracing_options.desc: "End-to-end tracing options"
e2e_tracing_options.label: "End-to-End Tracing Options"

e2e_attribute_meta.desc:
"""Simple attribute meta value added into Span's Attributes.</br/>
Typically set a simple and easily recognizable name or use the cluster name to identify different EMQX clusters."""
e2e_attribute_meta.label: "Attribute Meta Value"

publish_response_trace_level.desc:
"""Trace level for all message exchanges during the message publishing process.<br/>
Note: this config only takes effect when <code>sample</code> is set to <code>false</code>.
- `0`: Only `PUBLISH` packets are sampled for all QoS level (both QoS0, QoS1, QoS2).
- `1`: In addition to `PUBLISH` packets for all QoS. PUBACK and PUBREC are also sampled.
   That is, the first response packet in the QoS1 or QoS2 message interaction.
- `2`: Both `PUBLISH` packets and all response packets `PUBACK`, `PUBREC`, `PUBREL`, `PUBCOMP` will be sampled."""
publish_response_trace_level.label: "Publish Trace Level"

e2e_samplers.desc: """End-to-end Tracing Samplers."""
e2e_samplers.label: "Samplers"

whitelist_based_sampler.desc:
"""Whitelist-based Sampler. All Root Spans matched the whitelist will be sampled."""
whitelist_based_samplers.label: "Whitelist Based Sampler"

event_based_samplers.desc:
"""Event-based Samplers. The Spans that not matched the whitelist will be sampled based on the event type and the ratio setting."""
event_based_samplers.label: "Event Based Samplers"

event_type.desc:
"""Tracing event type.<br/>
- `"client.connect"`: Trace client Connect.<br/>
- `"client.disconnect"`: Trace client Disconnect.<br/>
- `"client.subscribe"`: Trace client Subscribe.<br/>
- `"client.unsubscribe"`: Trace client Unsubscribe.<br/>
- `"client.publish"`: Trace Client publishing messages. The message-delivering to subscribers will also be sampled as a part of the message publishing process."""
event_type.label: "Event Type"

ratio.desc: "Sampling ratio for the event type."
ratio.label: "Event based Sampling Ratio"

}
